#!/bin/bash
#SBATCH --job-name=SCMIPobrobka
#SBATCH -p fast
#SBATCH --time=0-01:00:00
#SBATCH --no-requeue
#SBATCH --output=OUT-obrobka.txt
#SBATCH --error=ERR-obrobka.txt

#skrypt wymaga: resultMerger.jar w katalogu wywolania, oraz istnienia katalogu 'merged' (lub inna nazwa) oraz w nim: program + config.txt (odpowiednio ustawiony) [+startArguments.txt] oraz filterCopy.jar + FilterConfig.txt

cd $SLURM_SUBMIT_DIR;
LANG=C; #potrzebne do sprawdzenia CONDITIONS (do formatowania liczb przez printf na kropkÄ™ zamiast przecinka)
source scriptConfig;
invPotPower=$(cat filePotPower | head -n ${1} | tail -1);
T=$(cat fileTemperatures | head -n ${2} | tail -1);

fullArgNum=$(wc -l startArguments.txt | cut -f1 -d' ');
if [ ${invPotPower} = 1.000E+02 ]; then 
  if [ ${T} = 1.000E+00 ]; then minPoint=0; maxPoint=9;
  elif [ ${T} = 1.000E-01 ]; then minPoint=8; maxPoint=14;
  elif [ ${T} = 1.000E-02 ]; then minPoint=13; maxPoint=19;
  elif [ ${T} = 1.000E-03 ]; then minPoint=18; maxPoint=24;
  elif [ ${T} = 1.000E-04 ]; then minPoint=23; maxPoint=29;
  elif [ ${T} = 1.000E-05 ]; then minPoint=28; maxPoint=34;
  fi;
elif [ ${invPotPower} = 5.000E+02 ]; then 
  if [ ${T} = 1.000E+00 ]; then minPoint=3; maxPoint=14;
  elif [ ${T} = 1.000E-01 ]; then minPoint=8; maxPoint=19;
  elif [ ${T} = 1.000E-02 ]; then minPoint=13; maxPoint=24;
  elif [ ${T} = 1.000E-03 ]; then minPoint=18; maxPoint=29;
  elif [ ${T} = 1.000E-04 ]; then minPoint=23; maxPoint=34;
  elif [ ${T} = 1.000E-05 ]; then minPoint=28; maxPoint=39;
  fi;
elif [ ${invPotPower} = 1.000E+03 ]; then 
  if [ ${T} = 1.000E+00 ]; then minPoint=1; maxPoint=18;
  elif [ ${T} = 1.000E-01 ]; then minPoint=6; maxPoint=23;
  elif [ ${T} = 1.000E-02 ]; then minPoint=11; maxPoint=28;
  elif [ ${T} = 1.000E-03 ]; then minPoint=16; maxPoint=33;
  elif [ ${T} = 1.000E-04 ]; then minPoint=21; maxPoint=38;
  elif [ ${T} = 1.000E-05 ]; then minPoint=26; maxPoint=43;
  fi;
fi;
minPoint=0; maxPoint=19;
if [ ${G} = 0 ]; then minPointBuffer=$((${fullArgNum} - ${maxPoint})); else minPointBuffer=${minPoint}; fi;

#time srun java -jar resultMerger.jar ${newDirectoryName} ${N} ${gaps} ${G} ${T} ${polydisperseDelta} ${invPotPower} ${minDirectory} ${maxDirectory} ${liczbaDanych};
mkdir ${newDirectoryName};
mkdir ${newDirectoryName}/3D_N-${N}_gaps-${gaps}_G-${G}_badanie-${useSpecificDir}_T-${T}_pDD-${polydisperseDelta}_iPP-${invPotPower};
startArgumentsLength=$(wc -l startArguments.txt | cut -f1 -d' ');
for ((k=${maxJobID};k>=1;k--)); do
  for ((i=${minDirectory};i<=${maxDirectory};i++)); do
    for ((j=$((${minPoint}+1));j<=${maxPoint};j++)); do

      if [ ${G} = 1 ]; then pNum=$((${j} - 1)); else pNum=$((${startArgumentsLength} - ${j})); fi;
      condition1=$(echo "$(printf '%.17f' $(cut 3D_N-${N}_gaps-${gaps}_G-${G}_badanie-${i}_T-${T}_pDD-${polydisperseDelta}_iPP-${invPotPower}/ResultsSummary_p-${pNum}.txt -f78 | head -n 2 | tail -1)) > 0" | bc); 
      condition2=$(echo "$(printf '%.17f' $(cut 3D_N-${N}_gaps-${gaps}_G-${G}_badanie-${i}_T-${T}_pDD-${polydisperseDelta}_iPP-${invPotPower}/ResultsSummary_p-${pNum}.txt -f79 | head -n 2 | tail -1)) > 0" | bc);
      condition3a=$(echo "$(printf '%.17f' $(cut 3D_N-${N}_gaps-${gaps}_G-${G}_badanie-${i}_T-${T}_pDD-${polydisperseDelta}_iPP-${invPotPower}/ResultsSummary_p-${pNum}.txt -f80 | head -n 2 | tail -1)) >= -0.5" | bc);
      condition3b=$(echo "$(printf '%.17f' $(cut 3D_N-${N}_gaps-${gaps}_G-${G}_badanie-${i}_T-${T}_pDD-${polydisperseDelta}_iPP-${invPotPower}/ResultsSummary_p-${pNum}.txt -f80 | head -n 2 | tail -1)) <= 1" | bc);
      
      if [[ ${condition1} -eq 1 && ${condition2} -eq 1 && ${condition3a} -eq 1 && ${condition3b} -eq 1 ]]; then 
        PRESSURE=$(cut -f2 startArguments.txt | head -n ${j} | tail -1);
        cat 3D_N-${N}_gaps-${gaps}_G-${G}_badanie-${i}_T-${T}_pDD-${polydisperseDelta}_iPP-${invPotPower}/j-${k}_Configurations_arg-${PRESSURE}_Results.txt >> ${newDirectoryName}/3D_N-${N}_gaps-${gaps}_G-${G}_badanie-${useSpecificDir}_T-${T}_pDD-${polydisperseDelta}_iPP-${invPotPower}/j-none_Configurations_arg-${PRESSURE}_Results.txt;
      else printf "iPP: ${invPotPower}, T: ${T}, dir: ${i}, pNum: ${pNum}, BAD stability conditions.\n";
      fi;
    done;
  done;
done;

cd ${newDirectoryName};
time srun ./program 5 none ${linesToSkip} ${N} ${gaps} ${G} ${minPointBuffer} $((${maxPoint} - ${minPoint})) ${useSpecificDir} ${T} ${polydisperseDelta} ${invPotPower};
#time srun java -jar filterCopy.jar;

exit 0
