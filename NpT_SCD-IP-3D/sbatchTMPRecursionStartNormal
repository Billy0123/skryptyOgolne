#!/bin/bash
#SBATCH --job-name=HCHRecSNTMP
#SBATCH -p standard
#SBATCH --time=0-05:00:00
#SBATCH --mem-per-cpu=10M
#SBATCH --no-requeue
#SBATCH --output=output/OUT_HCH3120_100_%j.txt
#SBATCH --error=output/ERR_HCH3120_100_%j.txt

#$1-N, $2-gaps, $3-growing, $4-iterationsNumber, $5-useSpecificDirectory (UWAGA: NIE 0), $6-MAX(+1)PointNumber(from 0), $7-pointNumber(from 0), $8-filterText, $9-generatorStartPoint, $10-jobID, $11-T, $12-polydisperseDelta, $13-invPotPower


#UWAGA #1: SLURM nie tworzy indywidualnego folderu dla kazdego zadania (ponizej tworzony jest recznie)
mkdir $TMPDIR/tmp_mb1991_$SLURM_JOB_ID
cd $TMPDIR/tmp_mb1991_$SLURM_JOB_ID
pwd
echo "==============================="

cp $SLURM_SUBMIT_DIR/program .
cp $SLURM_SUBMIT_DIR/config.txt .
cp $SLURM_SUBMIT_DIR/startArguments.txt .
echo "files copied"

#UWAGA #2: Mozna do programu zadac jobID rowny np. 'repeats left' (lub 'none' gdy to zwykla rekurencja [a nie onePoint]). Wtedy w przypadku ewentualnej reanimacji powinno byc latwiej (bo: komenda 'sacct' [i podobne], czy nawet zapis w ERR [jezeli akurat powstanie - na co liczyc nie mozna] da co prawda informacje o jobID nieudanego jobu, jednak NIE DA informacji o jobID jobu 'poprzedniego' [z ktorego on korzystal i ktorego znajomosc potrzebna jest do reanimacji]) - nie bedzie trzeba go szukac po folderach indywidualnie dla kazdego reanimowanego jobu.
time srun ./program 2 ${10} $1 $2 $3 $4 $5 0 $7 $9 ${11} ${12} ${13}

mv 3D_N-$1_gaps-$2_G-$3_badanie-$5_T-${11}_pDD-${12}_iPP-${13}/ResultsSummary.txt 3D_N-$1_gaps-$2_G-$3_badanie-$5_T-${11}_pDD-${12}_iPP-${13}/ResultsSummary_p-$7.txt
cp -fr 3D_N-$1_gaps-$2_G-$3_badanie-$5_T-${11}_pDD-${12}_iPP-${13} $SLURM_SUBMIT_DIR
#UWAGA #3: SLURM nie kasuje po sobie tempa automatycznie
rm -r $TMPDIR/tmp_mb1991_$SLURM_JOB_ID

cd $SLURM_SUBMIT_DIR
sbatch --job-name=$8G$3B$5P$(($7 + $4)) --output=output/OUT_HC$1_gaps-$2_G-$3_B-$5_P-$(($7 + $4))_T-${11}_pDD-${12}_iPP-${13}_%j.txt --error=output/ERR_HC$1_gaps-$2_G-$3_B-$5_P-$(($7 + $4))_T-${11}_pDD-${12}_iPP-${13}_%j.txt sbatchTMPRecursion ${10} $1 $2 $3 $(($7 + $4 - 1)) $4 $5 $6 $8 ${11} ${12} ${13};
exit 0
