#!/bin/bash
#SBATCH --job-name=HCHRecSNTMP
#SBATCH -p standard
#SBATCH --time=1-0:0:0
#SBATCH --mem-per-cpu=10M
#SBATCH --no-requeue
#SBATCH --output=output/OUT_HCH3120_100_%j.txt
#SBATCH --error=output/ERR_HCH3120_100_%j.txt

#$1-N, $2-gaps, $3-multimerS, $4-multimerD, $5-growing, $6-useSpecificDirectory (UWAGA: NIE 0), $7-pointNumber(from 0), $8-ile razy powtorzyc wykonanie jobu?, $9-iterationsNumber, $10-lambdaSetIndex, $11-filterText, $12-multimerN


#UWAGA #1: SLURM nie tworzy indywidualnego folderu dla kazdego zadania (ponizej tworzony jest recznie)
mkdir $TMPDIR/tmp_mb1991_$SLURM_JOB_ID
cd $TMPDIR/tmp_mb1991_$SLURM_JOB_ID
pwd
echo "==============================="

cp $SLURM_SUBMIT_DIR/program .
cp $SLURM_SUBMIT_DIR/config.txt .
cp $SLURM_SUBMIT_DIR/startArguments.txt .
cp $SLURM_SUBMIT_DIR/lambdaSets.txt .

#UWAGA #2: Mozna do programu zadac jobID rowny np. 'repeats left' (lub 'none' gdy to zwykla rekurencja [a nie onePoint]). Wtedy w przypadku ewentualnej reanimacji powinno byc latwiej (bo: komenda 'sacct' [i podobne], czy nawet zapis w ERR [jezeli akurat powstanie - na co liczyc nie mozna] da co prawda informacje o jobID nieudanego jobu, jednak NIE DA informacji o jobID jobu 'poprzedniego' [z ktorego on korzystal i ktorego znajomosc potrzebna jest do reanimacji]) - nie bedzie trzeba go szukac po folderach indywidualnie dla kazdego reanimowanego jobu.
time srun ./program 2 $8 $1 $2 $3 $4 $5 $9 $6 0 $7 ${10} ${12}

cp -fr 2D_N-$1_gaps-$2_G-$5_badanie-$6_mN-${12}_mS-$3_mD-$4 $SLURM_SUBMIT_DIR
#UWAGA #3: SLURM nie kasuje po sobie tempa automatycznie
rm -r $TMPDIR/tmp_mb1991_$SLURM_JOB_ID

cd $SLURM_SUBMIT_DIR
#sbatch --job-name=${11}B$6P$7C${10}R$(($8 - 1)) --output=output/OUT_HCH$1_gaps-$2_mS-$3_mD-$4_G-$5_B-$6_P-$7_C-${10}_R-$(($8 - 1))_%j.txt --error=output/ERR_HCH$1_gaps-$2_mS-$3_mD-$4_G-$5_B-$6_P-$7_C-${10}_R-$(($8 - 1))_%j.txt sbatchTMPRecursionOnePoint $8 $1 $2 $3 $4 $5 $7 $6 $(($8 - 1)) ${10} ${11} ${12};

exit 0
